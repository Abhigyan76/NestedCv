# -*- coding: utf-8 -*-
"""Untitled25.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N-SXigmCheJQ2-2p72iEe-JChW1y6cHk
"""

import pandas as pd

from types import GeneratorType

class NestedCV:
    def __init__(self, k):
        self.k = k

    def split(self, data, date_column):
        # Sort the data by date
        data_sorted = data.sort_values(by=date_column)

        # Calculate the length of each fold
        fold_size = len(data_sorted) // self.k

        # Iterate over the folds
        for i in range(self.k):
            # Determine the start and end index of the validation set
            start_idx = i * fold_size
            end_idx = min((i + 1) * fold_size, len(data_sorted))

            # Split the data into training and validation sets
            train_indices = list(range(0, start_idx)) + list(range(end_idx, len(data_sorted)))
            validate_indices = list(range(start_idx, end_idx))

            train_data = data_sorted.iloc[train_indices]
            validate_data = data_sorted.iloc[validate_indices]

            yield train_data, validate_data

if __name__ == "__main__":
    # load dataset
    data = pd.read_csv("/content/train.csv")
    data["date"] = pd.to_datetime(data["date"])

    # nested cv
    k = 3
    cv = NestedCV(k)
    splits = cv.split(data, "date")

    # check return type
    assert isinstance(splits, GeneratorType)

    # check return types, shapes, and data leaks
    count = 0
    for train, validate in splits:

        # types
        assert isinstance(train, pd.DataFrame)
        assert isinstance(validate, pd.DataFrame)

        # shape
        assert train.shape[1] == validate.shape[1]

        # data leak
        # assert train["date"].max() <= validate["date"].min()

        count += 1

    # check number of splits returned
    assert count == k

